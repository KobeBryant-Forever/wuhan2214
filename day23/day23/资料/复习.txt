1、原型
    1、构造函数的弊端
        对象下的静止属性对象自己本身保存 没问问题，但是一些函数方法(能力) 对象本身保存就会导致内存浪费
    2、原型
        1、原型三句话
            1、每一个构造函数(function)都有一个属性叫做prototype(构造函数也是对象)，对应的值为一个对象，这个对象叫做原型(系统自己动进行分配)
            2、每次以构造函数new对象时.系统自动为对象下增加一个属性"__proto__",并且值为构造函数的原型。所以原型是被所有的实例对象所共享
            3、每一个原型上都存在constructor属性，自动指向到了构造函数
        2、原型链
            原型也是对象，也存在原型。多个原型组合到一起就叫做原型链
    3、对象下的属性使用规则
        读取设置：先在当前对象下找这个属性，如果没找到就原型上寻找，如果原型也没找到，继续向上，直到null 都还没找到 最终结果就是undefined，如果某一个位置找到了这个属性就直接使用
        设置属性：永远是修改当前对象

        修改原型属性不能使用对象改，需要使用构造函数.prototype方式进行修改

